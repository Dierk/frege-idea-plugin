/* The following code was generated by JFlex 1.4.3 on 14.10.14 23:13 */

package org.fregelang.plugin.idea;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.fregelang.plugin.idea.psi.FregeTypes;
import com.intellij.psi.TokenType;


import java.util.*;
import com.intellij.lexer.*;
import com.intellij.psi.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14.10.14 23:13 from the specification file
 * <tt>/projects/git/frege-idea-plugin/src/org/fregelang/plugin/idea/Frege.flex</tt>
 */
class FregeLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int BLOCK_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int TEX = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\3\0\1\4\1\0\1\1\3\0\1\1\1\2\1\0\1\1\1\1"+
    "\22\0\1\1\1\113\1\13\1\111\1\21\1\6\1\30\1\20\1\76"+
    "\1\77\1\6\1\6\1\102\1\65\1\101\1\6\1\126\1\57\1\57"+
    "\1\57\1\57\3\14\2\3\1\17\1\100\1\105\1\103\1\106\1\110"+
    "\1\26\1\47\1\52\1\50\1\16\1\45\1\53\1\62\1\42\1\56"+
    "\1\11\1\51\1\37\1\61\1\35\1\41\1\56\1\46\1\55\1\40"+
    "\1\43\1\36\1\54\1\11\1\44\1\60\1\11\1\75\1\24\1\25"+
    "\1\27\1\12\1\5\1\34\1\66\1\15\1\23\1\67\1\32\1\70"+
    "\1\121\1\71\2\10\1\115\1\22\1\72\1\63\1\120\1\123\1\33"+
    "\1\114\1\116\1\117\1\31\1\125\1\64\1\124\1\10\1\73\1\104"+
    "\1\74\1\112\53\0\1\10\12\0\1\10\4\0\1\10\5\0\27\7"+
    "\1\0\7\7\30\10\1\0\10\10\1\7\1\10\1\7\1\10\1\7"+
    "\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7"+
    "\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7"+
    "\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7"+
    "\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7"+
    "\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7"+
    "\2\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7"+
    "\1\10\1\7\1\10\1\7\1\10\1\7\2\10\1\7\1\10\1\7"+
    "\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7"+
    "\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7"+
    "\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7"+
    "\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7"+
    "\1\10\1\7\1\10\2\7\1\10\1\7\1\10\1\7\3\10\2\7"+
    "\1\10\1\7\1\10\2\7\1\10\3\7\2\10\4\7\1\10\2\7"+
    "\1\10\3\7\3\10\2\7\1\10\2\7\1\10\1\7\1\10\1\7"+
    "\1\10\2\7\1\10\1\7\2\10\1\7\1\10\2\7\1\10\3\7"+
    "\1\10\1\7\1\10\2\7\2\10\1\0\1\7\3\10\4\0\1\7"+
    "\1\0\1\10\1\7\1\0\1\10\1\7\1\0\1\10\1\7\1\10"+
    "\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10"+
    "\1\7\1\10\1\7\2\10\1\7\1\10\1\7\1\10\1\7\1\10"+
    "\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10"+
    "\1\7\2\10\1\7\1\0\1\10\1\7\1\10\3\7\1\10\1\7"+
    "\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7"+
    "\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7"+
    "\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7"+
    "\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7"+
    "\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7"+
    "\1\10\1\7\1\10\1\7\1\10\1\7\4\10\31\0\140\10\326\0"+
    "\1\7\1\0\3\7\1\0\1\7\1\0\2\7\1\10\21\7\1\0"+
    "\11\7\43\10\1\0\2\10\3\7\3\10\1\7\1\10\1\7\1\10"+
    "\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10"+
    "\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\5\10"+
    "\1\7\1\10\1\0\1\7\1\10\2\7\1\10\4\0\60\7\60\10"+
    "\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10"+
    "\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10"+
    "\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10"+
    "\1\7\1\10\1\7\1\10\10\0\1\7\1\10\1\7\1\10\1\7"+
    "\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7"+
    "\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7"+
    "\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7"+
    "\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7"+
    "\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\2\7"+
    "\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7"+
    "\1\10\1\7\1\10\1\0\1\7\1\10\1\7\1\10\1\7\1\10"+
    "\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10"+
    "\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10"+
    "\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10"+
    "\1\7\1\10\2\0\1\7\1\10\6\0\1\7\1\10\1\7\1\10"+
    "\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10"+
    "\1\7\1\10\41\0\46\7\12\0\47\10\u0b18\0\46\7\u0c3a\0\54\10"+
    "\66\0\12\10\224\0\1\7\1\10\1\7\1\10\1\7\1\10\1\7"+
    "\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7"+
    "\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7"+
    "\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7"+
    "\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7"+
    "\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7"+
    "\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7"+
    "\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7"+
    "\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7"+
    "\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7"+
    "\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7"+
    "\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7"+
    "\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7"+
    "\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7"+
    "\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7"+
    "\1\10\1\7\7\10\4\0\1\7\1\10\1\7\1\10\1\7\1\10"+
    "\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10"+
    "\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10"+
    "\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10"+
    "\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10"+
    "\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10"+
    "\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10"+
    "\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10"+
    "\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10\1\7\1\10"+
    "\1\7\1\10\1\7\1\10\6\0\10\10\10\7\6\10\2\0\6\7"+
    "\2\0\10\10\10\7\10\10\10\7\6\10\2\0\6\7\2\0\10\10"+
    "\1\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7\10\10\10\7"+
    "\16\10\2\0\10\10\10\0\10\10\10\0\10\10\10\0\5\10\1\0"+
    "\2\10\4\7\2\0\1\10\3\0\3\10\1\0\2\10\4\7\4\0"+
    "\4\10\2\0\2\10\4\7\4\0\10\10\5\7\5\0\3\10\1\0"+
    "\2\10\4\7\165\0\1\10\15\0\1\10\202\0\1\7\4\0\1\7"+
    "\2\0\1\10\3\7\2\10\3\7\1\10\1\0\1\7\3\0\5\7"+
    "\6\0\1\7\1\0\1\7\1\0\1\7\1\0\4\7\1\0\1\10"+
    "\2\7\1\0\1\7\1\10\4\0\1\10\3\0\1\10\2\7\5\0"+
    "\1\7\4\10\110\0\1\107\155\0\1\122\ud8ff\0\7\10\14\0\5\10"+
    "\u0409\0\32\7\6\0\32\10\245\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\2\1\11\1\13\1\14\1\15"+
    "\2\11\1\16\1\17\1\20\3\11\1\7\2\11\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\7\1\33\1\34\1\35\1\36\1\37\5\11"+
    "\1\40\2\11\1\5\3\41\2\1\1\0\1\42\1\0"+
    "\2\11\1\43\1\44\1\0\1\45\1\0\2\11\1\46"+
    "\1\11\1\0\1\11\1\47\1\50\1\51\1\33\3\11"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\10\11\2\5"+
    "\1\60\1\61\1\1\20\0\2\11\1\62\17\0\3\11"+
    "\1\0\6\11\1\0\1\11\1\63\6\11\13\0\1\64"+
    "\1\11\15\0\1\11\1\65\1\11\1\0\3\11\1\66"+
    "\3\11\1\0\1\67\1\70\1\71\4\11\1\0\1\72"+
    "\2\11\1\0\4\11\1\73\1\11\1\0\3\11\1\74"+
    "\1\0\1\75\1\11\1\0\1\40\1\11\1\76\1\77"+
    "\1\100\1\101\1\11\1\102\1\103\1\104\1\11\1\0"+
    "\1\105\1\0\1\106\2\11\2\0\1\107\1\11\2\0"+
    "\1\110\1\0\1\111\2\0\1\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[247];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\127\0\256\0\u0105\0\u015c\0\u0105\0\u01b3\0\u0105"+
    "\0\u020a\0\u0261\0\u02b8\0\u02b8\0\u030f\0\u0366\0\u03bd\0\u0414"+
    "\0\u020a\0\u046b\0\u04c2\0\u0519\0\u0105\0\u020a\0\u0570\0\u05c7"+
    "\0\u061e\0\u0675\0\u06cc\0\u0723\0\u077a\0\u0105\0\u0105\0\u0105"+
    "\0\u0105\0\u0105\0\u07d1\0\u0105\0\u0828\0\u020a\0\u087f\0\u0105"+
    "\0\u020a\0\u020a\0\u020a\0\u020a\0\u08d6\0\u092d\0\u0984\0\u09db"+
    "\0\u0a32\0\u0105\0\u0a89\0\u0ae0\0\u0b37\0\u0105\0\u0b8e\0\u0be5"+
    "\0\u0c3c\0\u0c93\0\u030f\0\u0105\0\u0cea\0\u0d41\0\u0d98\0\u0def"+
    "\0\u0105\0\u0e46\0\u0105\0\u0e9d\0\u0ef4\0\u0f4b\0\u02b8\0\u0fa2"+
    "\0\u0ff9\0\u1050\0\u02b8\0\u02b8\0\u10a7\0\u020a\0\u10fe\0\u1155"+
    "\0\u11ac\0\u02b8\0\u1203\0\u125a\0\u020a\0\u020a\0\u020a\0\u12b1"+
    "\0\u1308\0\u135f\0\u13b6\0\u140d\0\u1464\0\u14bb\0\u1512\0\u1569"+
    "\0\u15c0\0\u0105\0\u0105\0\u1617\0\u166e\0\u16c5\0\u171c\0\u1773"+
    "\0\u17ca\0\u1821\0\u1878\0\u18cf\0\u1926\0\u197d\0\u19d4\0\u1a2b"+
    "\0\u1a82\0\u1ad9\0\u1b30\0\u1b87\0\u1bde\0\u1c35\0\u0105\0\u1c8c"+
    "\0\u1ce3\0\u1d3a\0\u1d91\0\u1de8\0\u1e3f\0\u1e96\0\u1eed\0\u1f44"+
    "\0\u1f9b\0\u1ff2\0\u2049\0\u20a0\0\u20f7\0\u214e\0\u21a5\0\u21fc"+
    "\0\u2253\0\u22aa\0\u2301\0\u2358\0\u23af\0\u2406\0\u245d\0\u24b4"+
    "\0\u250b\0\u2562\0\u02b8\0\u25b9\0\u2610\0\u2667\0\u26be\0\u2715"+
    "\0\u276c\0\u27c3\0\u281a\0\u2871\0\u28c8\0\u291f\0\u2976\0\u29cd"+
    "\0\u2a24\0\u2a7b\0\u2ad2\0\u2b29\0\u02b8\0\u2b80\0\u2bd7\0\u2c2e"+
    "\0\u2c85\0\u2cdc\0\u2d33\0\u2d8a\0\u2de1\0\u2e38\0\u2e8f\0\u2ee6"+
    "\0\u2f3d\0\u2f94\0\u2feb\0\u3042\0\u02b8\0\u3099\0\u30f0\0\u3147"+
    "\0\u319e\0\u31f5\0\u02b8\0\u324c\0\u32a3\0\u32fa\0\u3351\0\u02b8"+
    "\0\u02b8\0\u02b8\0\u33a8\0\u33ff\0\u3456\0\u34ad\0\u3504\0\u02b8"+
    "\0\u355b\0\u35b2\0\u3609\0\u3660\0\u36b7\0\u370e\0\u3765\0\u37bc"+
    "\0\u3813\0\u386a\0\u38c1\0\u3918\0\u396f\0\u02b8\0\u39c6\0\u02b8"+
    "\0\u3a1d\0\u3a74\0\u02b8\0\u3acb\0\u02b8\0\u02b8\0\u02b8\0\u02b8"+
    "\0\u3b22\0\u250b\0\u02b8\0\u02b8\0\u3b79\0\u3bd0\0\u02b8\0\u3c27"+
    "\0\u02b8\0\u3c7e\0\u3cd5\0\u3d2c\0\u3d83\0\u02b8\0\u3dda\0\u3e31"+
    "\0\u3e88\0\u02b8\0\u3edf\0\u0105\0\u3f36\0\u3f8d\0\u0105";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[247];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\2\7\1\10\1\11\1\12\1\13"+
    "\1\12\1\14\1\15\1\7\1\16\1\12\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\2\11\1\13"+
    "\1\27\1\13\1\30\22\12\1\7\3\12\1\31\1\13"+
    "\1\32\1\13\1\33\1\13\1\34\1\13\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\11\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\13\1\61\1\62\1\63\1\13"+
    "\1\64\1\65\65\66\1\67\5\66\1\70\33\66\24\71"+
    "\1\72\102\71\130\0\1\5\130\0\2\7\7\0\1\7"+
    "\42\0\1\7\46\0\1\7\6\0\1\11\12\0\1\11"+
    "\2\0\1\11\1\0\3\11\34\0\1\11\13\0\1\11"+
    "\1\0\4\11\1\0\4\11\16\0\2\12\2\0\4\12"+
    "\1\0\3\12\1\0\1\12\1\0\2\12\5\0\34\12"+
    "\1\0\5\12\21\0\6\12\1\0\4\12\3\0\2\13"+
    "\2\0\4\13\1\0\3\13\1\0\1\13\1\0\2\13"+
    "\5\0\34\13\1\0\5\13\21\0\6\13\1\0\4\13"+
    "\2\73\1\74\10\73\1\74\10\73\1\75\102\73\3\0"+
    "\2\13\2\0\4\13\1\0\3\13\1\0\1\13\1\0"+
    "\2\13\5\0\3\13\1\76\30\13\1\0\5\13\21\0"+
    "\1\13\1\77\4\13\1\0\4\13\6\0\1\100\10\0"+
    "\1\101\1\0\1\100\2\0\1\100\1\0\3\100\34\0"+
    "\1\100\13\0\1\100\1\0\4\100\1\0\4\100\13\0"+
    "\2\102\1\0\15\102\1\103\3\102\1\104\102\102\3\0"+
    "\2\13\2\0\4\13\1\0\3\13\1\0\1\13\1\0"+
    "\2\13\5\0\32\13\1\105\1\13\1\0\5\13\21\0"+
    "\6\13\1\0\4\13\3\0\2\13\2\0\4\13\1\0"+
    "\3\13\1\0\1\13\1\0\2\13\5\0\3\13\1\106"+
    "\26\13\1\107\1\13\1\0\1\13\1\110\3\13\21\0"+
    "\6\13\1\0\4\13\6\0\1\11\12\0\1\11\2\0"+
    "\1\11\1\0\3\11\34\0\1\11\1\0\1\111\11\0"+
    "\1\11\1\0\4\11\1\0\4\11\16\0\2\13\2\0"+
    "\4\13\1\0\3\13\1\0\1\13\1\0\2\13\5\0"+
    "\32\13\1\112\1\13\1\0\5\13\21\0\6\13\1\0"+
    "\4\13\3\0\2\13\2\0\4\13\1\0\3\13\1\0"+
    "\1\13\1\0\2\13\5\0\34\13\1\0\5\13\21\0"+
    "\1\113\5\13\1\0\4\13\3\0\2\13\2\0\4\13"+
    "\1\0\3\13\1\0\1\13\1\0\2\13\5\0\1\13"+
    "\1\114\32\13\1\0\5\13\21\0\6\13\1\0\4\13"+
    "\6\0\1\11\12\0\1\11\2\0\1\11\1\0\3\11"+
    "\34\0\1\115\13\0\1\11\1\0\3\11\1\116\1\0"+
    "\4\11\16\0\2\13\2\0\4\13\1\0\3\13\1\0"+
    "\1\13\1\0\2\13\5\0\33\13\1\117\1\0\5\13"+
    "\21\0\1\13\1\120\4\13\1\0\4\13\3\0\2\13"+
    "\2\0\4\13\1\0\3\13\1\0\1\13\1\0\1\121"+
    "\1\13\5\0\1\13\1\122\32\13\1\0\4\13\1\123"+
    "\21\0\6\13\1\0\4\13\65\0\1\124\47\0\1\11"+
    "\12\0\1\11\2\0\1\11\1\0\3\11\34\0\1\11"+
    "\13\0\1\125\1\0\4\11\1\0\4\11\21\0\1\11"+
    "\12\0\1\11\2\0\1\11\1\0\3\11\34\0\1\11"+
    "\13\0\1\11\1\0\3\11\1\126\1\0\4\11\21\0"+
    "\1\11\12\0\1\11\2\0\1\11\1\0\3\11\34\0"+
    "\1\127\13\0\1\11\1\0\4\11\1\0\4\11\16\0"+
    "\2\13\2\0\4\13\1\0\3\13\1\0\1\13\1\0"+
    "\2\13\5\0\3\13\1\130\30\13\1\0\5\13\21\0"+
    "\6\13\1\0\4\13\3\0\2\13\2\0\4\13\1\0"+
    "\3\13\1\0\1\13\1\0\2\13\5\0\34\13\1\0"+
    "\1\13\1\131\3\13\21\0\6\13\1\0\4\13\3\0"+
    "\2\13\2\0\4\13\1\0\3\13\1\0\1\13\1\0"+
    "\2\13\5\0\34\13\1\0\5\13\21\0\5\13\1\132"+
    "\1\0\1\13\1\133\2\13\3\0\2\13\2\0\4\13"+
    "\1\0\3\13\1\0\1\13\1\0\2\13\5\0\34\13"+
    "\1\0\4\13\1\134\21\0\6\13\1\0\4\13\3\0"+
    "\2\13\2\0\4\13\1\0\3\13\1\0\1\13\1\0"+
    "\2\13\5\0\34\13\1\0\3\13\1\135\1\13\21\0"+
    "\6\13\1\0\4\13\3\0\2\13\2\0\4\13\1\0"+
    "\3\13\1\0\1\13\1\0\2\13\5\0\34\13\1\0"+
    "\5\13\21\0\3\13\1\136\2\13\1\0\4\13\3\0"+
    "\2\13\2\0\4\13\1\0\3\13\1\0\1\13\1\0"+
    "\2\13\5\0\34\13\1\0\5\13\21\0\5\13\1\137"+
    "\1\0\4\13\3\0\2\7\7\0\1\7\24\0\1\140"+
    "\2\0\1\141\12\0\1\7\3\0\1\140\1\141\41\0"+
    "\1\7\74\0\1\142\117\0\1\143\41\0\24\71\1\0"+
    "\102\71\24\0\1\144\41\0\1\145\41\0\2\146\1\73"+
    "\7\0\2\73\1\0\1\147\1\0\1\73\3\0\1\73"+
    "\2\0\1\150\5\73\1\151\1\152\1\153\1\154\1\0"+
    "\1\155\2\0\1\156\1\0\1\157\1\160\1\0\1\161"+
    "\1\162\1\155\1\152\1\0\1\73\2\0\1\152\1\163"+
    "\1\164\1\0\1\73\3\0\1\73\23\0\1\73\7\0"+
    "\1\73\3\0\2\13\2\0\4\13\1\0\3\13\1\0"+
    "\1\13\1\0\2\13\5\0\34\13\1\0\5\13\21\0"+
    "\1\165\5\13\1\0\4\13\3\0\2\13\2\0\4\13"+
    "\1\0\3\13\1\0\1\13\1\0\2\13\5\0\3\13"+
    "\1\166\30\13\1\0\5\13\21\0\6\13\1\0\4\13"+
    "\6\0\1\100\12\0\1\100\2\0\1\100\1\0\3\100"+
    "\34\0\1\100\13\0\1\100\1\0\4\100\1\0\4\100"+
    "\33\0\1\167\111\0\1\170\7\0\1\102\1\170\1\0"+
    "\1\171\1\0\1\102\3\0\1\102\2\0\1\172\5\102"+
    "\1\173\1\174\1\175\1\176\1\0\1\177\2\0\1\200"+
    "\1\0\1\201\1\202\1\0\1\203\1\204\1\177\1\174"+
    "\1\0\1\170\2\0\1\174\1\205\1\206\1\0\1\102"+
    "\3\0\1\102\23\0\1\102\7\0\1\170\3\0\2\13"+
    "\2\0\4\13\1\0\3\13\1\0\1\13\1\0\1\13"+
    "\1\207\5\0\34\13\1\0\5\13\21\0\6\13\1\0"+
    "\4\13\3\0\2\13\2\0\4\13\1\0\3\13\1\0"+
    "\1\13\1\0\2\13\5\0\34\13\1\0\5\13\21\0"+
    "\2\13\1\210\3\13\1\0\4\13\3\0\2\13\2\0"+
    "\4\13\1\0\3\13\1\0\1\13\1\0\2\13\5\0"+
    "\1\13\1\211\32\13\1\0\5\13\21\0\6\13\1\0"+
    "\4\13\72\0\1\212\37\0\2\13\2\0\4\13\1\0"+
    "\3\13\1\0\1\13\1\0\2\13\5\0\2\13\1\213"+
    "\31\13\1\0\5\13\21\0\6\13\1\0\4\13\2\115"+
    "\1\0\124\115\3\0\2\13\2\0\4\13\1\0\3\13"+
    "\1\0\1\13\1\0\2\13\5\0\34\13\1\0\5\13"+
    "\21\0\4\13\1\214\1\13\1\0\4\13\3\0\2\13"+
    "\2\0\4\13\1\0\3\13\1\0\1\13\1\0\2\13"+
    "\5\0\34\13\1\0\5\13\21\0\1\215\5\13\1\0"+
    "\4\13\3\0\2\13\2\0\4\13\1\0\3\13\1\0"+
    "\1\13\1\0\2\13\5\0\34\13\1\0\5\13\21\0"+
    "\4\13\1\216\1\13\1\0\4\13\3\0\2\13\2\0"+
    "\4\13\1\0\3\13\1\0\1\13\1\0\2\13\5\0"+
    "\1\13\1\217\32\13\1\0\5\13\21\0\1\220\5\13"+
    "\1\0\4\13\111\0\1\221\20\0\2\13\2\0\4\13"+
    "\1\0\3\13\1\0\1\13\1\0\2\13\5\0\1\13"+
    "\1\222\32\13\1\0\5\13\21\0\6\13\1\0\4\13"+
    "\3\0\2\13\2\0\4\13\1\0\3\13\1\0\1\13"+
    "\1\0\2\13\5\0\34\13\1\0\5\13\21\0\2\13"+
    "\1\223\3\13\1\0\4\13\3\0\2\13\2\0\4\13"+
    "\1\0\3\13\1\0\1\13\1\0\2\13\5\0\34\13"+
    "\1\0\1\13\1\224\3\13\21\0\6\13\1\0\4\13"+
    "\3\0\2\13\2\0\4\13\1\0\3\13\1\0\1\13"+
    "\1\0\2\13\5\0\34\13\1\0\5\13\21\0\4\13"+
    "\1\225\1\13\1\0\4\13\3\0\2\13\2\0\4\13"+
    "\1\0\3\13\1\0\1\13\1\0\2\13\5\0\34\13"+
    "\1\0\5\13\21\0\1\226\5\13\1\0\4\13\3\0"+
    "\2\13\2\0\4\13\1\0\3\13\1\0\1\13\1\0"+
    "\1\13\1\227\5\0\34\13\1\0\5\13\21\0\6\13"+
    "\1\0\4\13\3\0\2\13\2\0\4\13\1\0\3\13"+
    "\1\0\1\13\1\0\2\13\5\0\3\13\1\230\30\13"+
    "\1\0\5\13\21\0\6\13\1\0\4\13\3\0\2\13"+
    "\2\0\4\13\1\0\3\13\1\0\1\13\1\0\2\13"+
    "\5\0\34\13\1\0\1\13\1\231\3\13\21\0\6\13"+
    "\1\0\4\13\14\0\1\140\42\0\1\140\46\0\1\140"+
    "\3\0\1\141\10\0\3\141\4\0\1\141\6\0\1\141"+
    "\1\0\1\141\10\0\1\141\1\0\2\141\1\0\2\141"+
    "\3\0\1\141\6\0\2\141\36\0\1\141\24\0\1\144"+
    "\171\0\1\232\40\0\2\146\21\0\1\73\141\0\1\233"+
    "\5\0\1\234\2\0\1\235\67\0\2\73\3\0\1\73"+
    "\5\0\4\73\5\0\22\73\1\0\3\73\12\0\1\73"+
    "\67\0\1\234\10\0\1\236\117\0\1\73\141\0\1\73"+
    "\111\0\1\237\2\0\1\73\1\0\1\240\12\0\1\73"+
    "\1\0\1\241\111\0\1\73\120\0\1\242\2\0\1\243"+
    "\1\155\1\0\1\244\15\0\1\73\115\0\1\236\125\0"+
    "\1\241\5\0\1\73\111\0\1\73\4\0\1\234\121\0"+
    "\1\73\12\0\1\73\67\0\1\73\42\0\1\73\46\0"+
    "\1\73\3\0\1\73\10\0\3\73\4\0\1\73\6\0"+
    "\1\73\1\0\1\73\10\0\1\73\1\0\2\73\1\0"+
    "\2\73\3\0\1\73\6\0\2\73\36\0\1\73\3\0"+
    "\2\13\2\0\4\13\1\0\3\13\1\0\1\13\1\0"+
    "\2\13\5\0\34\13\1\0\1\13\1\245\3\13\21\0"+
    "\6\13\1\0\4\13\3\0\2\13\2\0\4\13\1\0"+
    "\3\13\1\0\1\13\1\0\2\13\5\0\34\13\1\0"+
    "\5\13\21\0\1\246\5\13\1\0\4\13\3\0\1\170"+
    "\10\0\1\170\3\0\1\167\36\0\1\170\46\0\1\170"+
    "\37\0\1\247\5\0\1\250\2\0\1\251\67\0\2\102"+
    "\3\0\1\102\5\0\4\102\5\0\22\102\1\0\3\102"+
    "\12\0\1\102\67\0\1\250\10\0\1\252\117\0\1\102"+
    "\141\0\1\102\111\0\1\253\2\0\1\254\1\0\1\255"+
    "\12\0\1\102\1\0\1\256\111\0\1\102\120\0\1\257"+
    "\2\0\1\260\1\177\1\0\1\261\15\0\1\102\115\0"+
    "\1\252\125\0\1\256\5\0\1\102\111\0\1\102\4\0"+
    "\1\250\121\0\1\102\12\0\1\102\67\0\1\262\42\0"+
    "\1\262\46\0\1\262\3\0\1\263\10\0\3\263\4\0"+
    "\1\263\6\0\1\263\1\0\1\263\10\0\1\263\1\0"+
    "\2\263\1\0\2\263\3\0\1\263\6\0\2\263\36\0"+
    "\1\263\3\0\2\13\2\0\4\13\1\0\3\13\1\0"+
    "\1\13\1\0\2\13\5\0\34\13\1\0\5\13\21\0"+
    "\3\13\1\264\2\13\1\0\4\13\3\0\2\13\2\0"+
    "\4\13\1\0\3\13\1\0\1\13\1\0\2\13\5\0"+
    "\3\13\1\265\30\13\1\0\5\13\21\0\6\13\1\0"+
    "\4\13\3\0\2\13\2\0\4\13\1\0\3\13\1\0"+
    "\1\13\1\0\2\13\5\0\3\13\1\266\30\13\1\0"+
    "\5\13\21\0\6\13\1\0\4\13\23\0\1\267\106\0"+
    "\2\13\2\0\4\13\1\0\3\13\1\0\1\13\1\0"+
    "\2\13\5\0\3\13\1\270\30\13\1\0\1\13\1\271"+
    "\3\13\21\0\6\13\1\0\4\13\3\0\2\13\2\0"+
    "\4\13\1\0\3\13\1\0\1\13\1\0\2\13\5\0"+
    "\32\13\1\272\1\13\1\0\5\13\21\0\6\13\1\0"+
    "\4\13\3\0\2\13\2\0\4\13\1\0\3\13\1\0"+
    "\1\13\1\0\2\13\5\0\34\13\1\0\1\13\1\273"+
    "\3\13\21\0\6\13\1\0\4\13\3\0\2\13\2\0"+
    "\4\13\1\0\3\13\1\0\1\13\1\0\2\13\5\0"+
    "\32\13\1\274\1\13\1\0\5\13\21\0\6\13\1\0"+
    "\4\13\3\0\2\13\2\0\4\13\1\0\3\13\1\0"+
    "\1\13\1\0\2\13\5\0\34\13\1\0\3\13\1\275"+
    "\1\13\21\0\6\13\1\0\4\13\3\0\2\13\2\0"+
    "\4\13\1\0\3\13\1\0\1\13\1\0\2\13\5\0"+
    "\34\13\1\0\5\13\21\0\2\13\1\276\3\13\1\0"+
    "\4\13\2\221\1\0\106\221\1\277\15\221\3\0\2\13"+
    "\2\0\4\13\1\0\3\13\1\0\1\13\1\0\2\13"+
    "\5\0\34\13\1\0\1\13\1\300\3\13\21\0\6\13"+
    "\1\0\4\13\3\0\2\13\2\0\4\13\1\0\3\13"+
    "\1\0\1\13\1\0\2\13\5\0\34\13\1\0\4\13"+
    "\1\301\21\0\6\13\1\0\4\13\3\0\2\13\2\0"+
    "\4\13\1\0\3\13\1\0\1\13\1\0\2\13\5\0"+
    "\34\13\1\0\1\13\1\302\3\13\21\0\6\13\1\0"+
    "\4\13\3\0\2\13\2\0\4\13\1\0\3\13\1\0"+
    "\1\13\1\0\2\13\5\0\3\13\1\303\30\13\1\0"+
    "\5\13\21\0\6\13\1\0\4\13\3\0\2\13\2\0"+
    "\4\13\1\0\3\13\1\0\1\13\1\0\2\13\5\0"+
    "\34\13\1\0\3\13\1\304\1\13\21\0\6\13\1\0"+
    "\4\13\3\0\2\13\2\0\4\13\1\0\3\13\1\0"+
    "\1\13\1\0\2\13\5\0\34\13\1\0\5\13\21\0"+
    "\1\13\1\305\4\13\1\0\4\13\3\0\2\13\2\0"+
    "\4\13\1\0\3\13\1\0\1\13\1\0\2\13\5\0"+
    "\2\13\1\306\31\13\1\0\5\13\21\0\6\13\1\0"+
    "\4\13\70\0\1\307\103\0\1\73\120\0\1\73\146\0"+
    "\1\73\120\0\1\73\127\0\1\73\120\0\1\73\117\0"+
    "\1\73\137\0\1\73\130\0\1\73\122\0\1\73\5\0"+
    "\1\73\57\0\2\13\2\0\4\13\1\0\3\13\1\0"+
    "\1\13\1\0\2\13\5\0\34\13\1\0\5\13\21\0"+
    "\1\310\5\13\1\0\4\13\45\0\1\102\120\0\1\102"+
    "\146\0\1\102\120\0\1\102\127\0\1\102\74\0\1\167"+
    "\21\0\1\102\130\0\1\102\117\0\1\102\137\0\1\102"+
    "\130\0\1\102\122\0\1\102\5\0\1\102\70\0\1\262"+
    "\3\0\1\167\36\0\1\262\46\0\1\262\3\0\1\263"+
    "\10\0\3\263\1\0\1\167\2\0\1\263\6\0\1\263"+
    "\1\0\1\263\10\0\1\263\1\0\2\263\1\0\2\263"+
    "\3\0\1\263\6\0\2\263\36\0\1\263\3\0\2\13"+
    "\2\0\4\13\1\0\3\13\1\0\1\13\1\0\2\13"+
    "\5\0\34\13\1\0\5\13\21\0\1\13\1\311\4\13"+
    "\1\0\4\13\3\0\2\13\2\0\4\13\1\0\3\13"+
    "\1\0\1\13\1\0\2\13\5\0\34\13\1\0\5\13"+
    "\21\0\3\13\1\312\2\13\1\0\4\13\73\0\1\313"+
    "\36\0\2\13\2\0\4\13\1\0\3\13\1\0\1\13"+
    "\1\0\2\13\5\0\34\13\1\0\5\13\21\0\1\13"+
    "\1\314\4\13\1\0\4\13\3\0\2\13\2\0\4\13"+
    "\1\0\3\13\1\0\1\13\1\0\2\13\5\0\34\13"+
    "\1\0\3\13\1\315\1\13\21\0\6\13\1\0\4\13"+
    "\3\0\2\13\2\0\4\13\1\0\3\13\1\0\1\13"+
    "\1\0\2\13\5\0\2\13\1\316\31\13\1\0\5\13"+
    "\21\0\6\13\1\0\4\13\3\0\2\13\2\0\4\13"+
    "\1\0\3\13\1\0\1\13\1\0\2\13\5\0\2\13"+
    "\1\317\31\13\1\0\5\13\21\0\6\13\1\0\4\13"+
    "\3\0\2\13\2\0\4\13\1\0\3\13\1\0\1\13"+
    "\1\0\2\13\5\0\33\13\1\320\1\0\5\13\21\0"+
    "\6\13\1\0\4\13\3\0\2\13\2\0\4\13\1\0"+
    "\3\13\1\0\1\13\1\0\2\13\5\0\3\13\1\321"+
    "\30\13\1\0\5\13\21\0\6\13\1\0\4\13\2\221"+
    "\1\0\62\221\1\322\23\221\1\277\15\221\3\0\2\13"+
    "\2\0\4\13\1\0\3\13\1\0\1\13\1\0\2\13"+
    "\5\0\1\13\1\323\32\13\1\0\5\13\21\0\6\13"+
    "\1\0\4\13\3\0\2\13\2\0\4\13\1\0\3\13"+
    "\1\0\1\13\1\0\2\13\5\0\34\13\1\0\4\13"+
    "\1\324\21\0\6\13\1\0\4\13\3\0\2\13\2\0"+
    "\4\13\1\0\3\13\1\0\1\13\1\0\2\13\5\0"+
    "\34\13\1\0\3\13\1\325\1\13\21\0\6\13\1\0"+
    "\4\13\3\0\2\13\2\0\4\13\1\0\3\13\1\0"+
    "\1\13\1\0\2\13\5\0\34\13\1\0\1\13\1\326"+
    "\3\13\21\0\6\13\1\0\4\13\71\0\1\327\40\0"+
    "\2\13\2\0\4\13\1\0\3\13\1\0\1\13\1\0"+
    "\2\13\5\0\34\13\1\0\1\13\1\330\3\13\21\0"+
    "\6\13\1\0\4\13\3\0\2\13\2\0\4\13\1\0"+
    "\3\13\1\0\1\13\1\0\2\13\5\0\34\13\1\0"+
    "\5\13\21\0\1\13\1\331\4\13\1\0\4\13\15\0"+
    "\1\332\114\0\2\13\2\0\4\13\1\0\3\13\1\0"+
    "\1\13\1\0\2\13\5\0\34\13\1\0\5\13\21\0"+
    "\1\13\1\333\4\13\1\0\4\13\3\0\2\13\2\0"+
    "\4\13\1\0\3\13\1\0\1\13\1\0\2\13\5\0"+
    "\34\13\1\0\2\13\1\334\2\13\21\0\6\13\1\0"+
    "\4\13\3\0\2\13\2\0\4\13\1\0\3\13\1\0"+
    "\1\13\1\0\2\13\5\0\34\13\1\0\5\13\21\0"+
    "\2\13\1\335\3\13\1\0\4\13\3\0\2\13\2\0"+
    "\4\13\1\0\3\13\1\0\1\13\1\0\2\13\5\0"+
    "\34\13\1\0\5\13\21\0\2\13\1\336\3\13\1\0"+
    "\4\13\3\0\2\13\2\0\4\13\1\0\3\13\1\0"+
    "\1\13\1\0\2\13\5\0\2\13\1\337\31\13\1\0"+
    "\5\13\21\0\1\13\1\340\4\13\1\0\4\13\3\0"+
    "\2\13\2\0\4\13\1\0\3\13\1\0\1\13\1\0"+
    "\2\13\5\0\34\13\1\0\4\13\1\341\21\0\6\13"+
    "\1\0\4\13\2\221\1\0\71\221\1\342\14\221\1\277"+
    "\15\221\3\0\2\13\2\0\4\13\1\0\3\13\1\0"+
    "\1\13\1\0\2\13\5\0\34\13\1\0\1\13\1\343"+
    "\3\13\21\0\6\13\1\0\4\13\3\0\2\13\2\0"+
    "\4\13\1\0\3\13\1\0\1\13\1\0\2\13\5\0"+
    "\34\13\1\0\2\13\1\344\2\13\21\0\6\13\1\0"+
    "\4\13\3\0\2\13\2\0\4\13\1\0\3\13\1\0"+
    "\1\13\1\0\2\13\5\0\1\13\1\345\32\13\1\0"+
    "\5\13\21\0\6\13\1\0\4\13\72\0\1\346\37\0"+
    "\2\13\2\0\4\13\1\0\3\13\1\0\1\13\1\0"+
    "\2\13\5\0\34\13\1\0\5\13\21\0\2\13\1\347"+
    "\3\13\1\0\4\13\63\0\1\350\46\0\2\13\2\0"+
    "\4\13\1\0\3\13\1\0\1\13\1\0\2\13\5\0"+
    "\34\13\1\0\4\13\1\351\21\0\6\13\1\0\4\13"+
    "\3\0\2\13\2\0\4\13\1\0\1\13\1\352\1\13"+
    "\1\0\1\13\1\0\2\13\5\0\34\13\1\0\5\13"+
    "\21\0\6\13\1\0\4\13\3\0\2\13\2\0\4\13"+
    "\1\0\3\13\1\0\1\13\1\0\2\13\5\0\34\13"+
    "\1\0\3\13\1\353\1\13\21\0\6\13\1\0\4\13"+
    "\73\0\1\354\56\0\1\355\106\0\2\13\2\0\4\13"+
    "\1\0\3\13\1\0\1\13\1\0\2\13\5\0\34\13"+
    "\1\0\1\13\1\356\3\13\21\0\6\13\1\0\4\13"+
    "\3\0\2\13\2\0\4\13\1\0\3\13\1\0\1\13"+
    "\1\0\2\13\5\0\34\13\1\0\1\13\1\357\3\13"+
    "\21\0\6\13\1\0\4\13\15\0\1\360\200\0\1\361"+
    "\42\0\2\13\2\0\4\13\1\0\3\13\1\0\1\13"+
    "\1\0\1\13\1\362\5\0\34\13\1\0\5\13\21\0"+
    "\6\13\1\0\4\13\63\0\1\363\137\0\1\364\55\0"+
    "\1\365\172\0\1\366\133\0\1\367\32\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16356];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\1\11\1\1\1\11\1\1\1\11\14\1"+
    "\1\11\10\1\5\11\1\1\1\11\3\1\1\11\11\1"+
    "\1\11\3\1\1\11\4\1\1\0\1\11\1\0\3\1"+
    "\1\11\1\0\1\11\1\0\4\1\1\0\30\1\2\11"+
    "\1\1\20\0\2\1\1\11\17\0\3\1\1\0\6\1"+
    "\1\0\10\1\13\0\2\1\15\0\3\1\1\0\7\1"+
    "\1\0\7\1\1\0\3\1\1\0\6\1\1\0\4\1"+
    "\1\0\2\1\1\0\13\1\1\0\1\1\1\0\3\1"+
    "\2\0\2\1\2\0\1\1\1\0\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[247];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private int commentStart;
    private int commentDepth;


  FregeLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  FregeLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1930) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 39: 
          { return FregeTypes.AS_KW;
          }
        case 75: break;
        case 1: 
          { return FregeTypes.BLOCK_COMMENT;
          }
        case 76: break;
        case 48: 
          { if (commentDepth > 0) {
            commentDepth--;
        }
        else {
             int state = yystate();
             yybegin(YYINITIAL);
             zzStartRead = commentStart;
             return FregeTypes.BLOCK_COMMENT;
        }
          }
        case 77: break;
        case 13: 
          { return FregeTypes.DOLLAR;
          }
        case 78: break;
        case 24: 
          { return FregeTypes.COMMA;
          }
        case 79: break;
        case 20: 
          { return FregeTypes.LEFT_PAREN;
          }
        case 80: break;
        case 27: 
          { return FregeTypes.RIGHT_ARROW;
          }
        case 81: break;
        case 18: 
          { return FregeTypes.RIGHT_BRACE;
          }
        case 82: break;
        case 28: 
          { return FregeTypes.QUESTION;
          }
        case 83: break;
        case 56: 
          { return FregeTypes.THEN_KW;
          }
        case 84: break;
        case 9: 
          { return FregeTypes.ID;
          }
        case 85: break;
        case 15: 
          { return FregeTypes.RIGHT_BRACKET;
          }
        case 86: break;
        case 43: 
          { return FregeTypes.IN_KW;
          }
        case 87: break;
        case 38: 
          { return FregeTypes.DO_KW;
          }
        case 88: break;
        case 45: 
          { return FregeTypes.DOT_DOT;
          }
        case 89: break;
        case 67: 
          { return FregeTypes.UNSAFE;
          }
        case 90: break;
        case 3: 
          { return TokenType.WHITE_SPACE;
          }
        case 91: break;
        case 34: 
          { return FregeTypes.STRING;
          }
        case 92: break;
        case 54: 
          { return FregeTypes.ELSE_KW;
          }
        case 93: break;
        case 52: 
          { return FregeTypes.CASE_KW;
          }
        case 94: break;
        case 73: 
          { yybegin(TEX); return FregeTypes.BLOCK_COMMENT;
          }
        case 95: break;
        case 26: 
          { return FregeTypes.VERTICAL_BAR;
          }
        case 96: break;
        case 22: 
          { return FregeTypes.SEMICOLON;
          }
        case 97: break;
        case 69: 
          { return FregeTypes.DEFAULT_KW;
          }
        case 98: break;
        case 74: 
          { yybegin(YYINITIAL); return FregeTypes.BLOCK_COMMENT;
          }
        case 99: break;
        case 71: 
          { return FregeTypes.INSTANCE_KW;
          }
        case 100: break;
        case 8: 
          { return FregeTypes.TYPE_OR_CONS;
          }
        case 101: break;
        case 55: 
          { return FregeTypes.SAFE;
          }
        case 102: break;
        case 57: 
          { return FregeTypes.TYPE_KW;
          }
        case 103: break;
        case 37: 
          { return FregeTypes.TH_TY_QUOTE;
          }
        case 104: break;
        case 21: 
          { return FregeTypes.RIGHT_PAREN;
          }
        case 105: break;
        case 23: 
          { return FregeTypes.DOT;
          }
        case 106: break;
        case 70: 
          { return FregeTypes.FOREIGN_KW;
          }
        case 107: break;
        case 30: 
          { return FregeTypes.TILDE;
          }
        case 108: break;
        case 58: 
          { return FregeTypes.CLASS_KW;
          }
        case 109: break;
        case 2: 
          { return TokenType.BAD_CHARACTER;
          }
        case 110: break;
        case 5: 
          { return FregeTypes.NUMBER;
          }
        case 111: break;
        case 19: 
          { return FregeTypes.LEFT_BRACKET;
          }
        case 112: break;
        case 68: 
          { return FregeTypes.HIDING_KW;
          }
        case 113: break;
        case 29: 
          { return FregeTypes.HASH;
          }
        case 114: break;
        case 35: 
          { return FregeTypes.OPERATOR_CONS;
          }
        case 115: break;
        case 53: 
          { return FregeTypes.DATA_KW;
          }
        case 116: break;
        case 40: 
          { return FregeTypes.OF_KW;
          }
        case 117: break;
        case 25: 
          { return FregeTypes.EQUALS;
          }
        case 118: break;
        case 63: 
          { return FregeTypes.IMPORT_KW;
          }
        case 119: break;
        case 7: 
          { return FregeTypes.OPERATOR_ID;
          }
        case 120: break;
        case 42: 
          { return FregeTypes.IF_KW;
          }
        case 121: break;
        case 62: 
          { return FregeTypes.EXPORT;
          }
        case 122: break;
        case 66: 
          { return FregeTypes.PRAGMA;
          }
        case 123: break;
        case 72: 
          { return FregeTypes.QUALIFIED_KW;
          }
        case 124: break;
        case 46: 
          { return FregeTypes.DOUBLE_ARROW;
          }
        case 125: break;
        case 12: 
          { return FregeTypes.TH_VAR_QUOTE;
          }
        case 126: break;
        case 47: 
          { return FregeTypes.LEFT_ARROW;
          }
        case 127: break;
        case 17: 
          { return FregeTypes.LEFT_BRACE;
          }
        case 128: break;
        case 49: 
          { commentDepth++;
          }
        case 129: break;
        case 64: 
          { return FregeTypes.INFIXR_KW;
          }
        case 130: break;
        case 6: 
          { return FregeTypes.BACKQUOTE;
          }
        case 131: break;
        case 16: 
          { return FregeTypes.AT;
          }
        case 132: break;
        case 10: 
          { return FregeTypes.UNDERSCORE;
          }
        case 133: break;
        case 60: 
          { return FregeTypes.WHERE_KW;
          }
        case 134: break;
        case 44: 
          { yybegin(BLOCK_COMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
          }
        case 135: break;
        case 50: 
          { return FregeTypes.CHARACTER;
          }
        case 136: break;
        case 41: 
          { return FregeTypes.END_OF_LINE_COMMENT;
          }
        case 137: break;
        case 51: 
          { return FregeTypes.LET_KW;
          }
        case 138: break;
        case 31: 
          { return FregeTypes.EXCLAMATION;
          }
        case 139: break;
        case 11: 
          { return FregeTypes.COLON;
          }
        case 140: break;
        case 61: 
          { return FregeTypes.MODULE_KW;
          }
        case 141: break;
        case 14: 
          { return FregeTypes.BACK_SLASH;
          }
        case 142: break;
        case 59: 
          { return FregeTypes.INFIX_KW;
          }
        case 143: break;
        case 36: 
          { return FregeTypes.DOUBLE_COLON;
          }
        case 144: break;
        case 4: 
          { return FregeTypes.NEW_LINE;
          }
        case 145: break;
        case 65: 
          { return FregeTypes.INFIXL_KW;
          }
        case 146: break;
        case 33: 
          { 
          }
        case 147: break;
        case 32: 
          { return FregeTypes.FORALL_KW;
          }
        case 148: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case BLOCK_COMMENT: {
              int state = yystate();
        yybegin(YYINITIAL);
        zzStartRead = commentStart;
        return FregeTypes.BLOCK_COMMENT;
            }
            case 248: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
